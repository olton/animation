!function(){"use strict";!function(){const e=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skew","skewX","skewY"],t=["opacity","zIndex"],n=["opacity","volume"],o=["scrollLeft","scrollTop"],r=["backgroundColor","color"],a=["opacity"],l=(e,t,n,o,r=!1)=>{t=m(t),r&&(n=parseInt(n)),e instanceof HTMLElement?void 0!==e[t]?e[t]=n:e.style[t]="transform"===t||t.toLowerCase().includes("color")?n:n+o:e[t]=n},s=e=>{if(!e instanceof HTMLElement)return;const t=e.style.transform||"",n=/(\w+)\(([^)]*)\)/g,o=new Map;let r;for(;r=n.exec(t);)o.set(r[1],r[2]);return o},i=e=>Array.from(/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e||"#000000")).slice(1).map((e=>parseInt(e,16))),c=e=>{const t=/^#?([a-f\d])([a-f\d])([a-f\d])$/i;return"#"===e[0]&&4===e.length?"#"+e.replace(t,((e,t,n,o)=>t+t+n+n+o+o)):"#"===e[0]?e:"#"+e},p=function(e,t,n){((e,t,n)=>{d(t,((t,o)=>{l(e,t,o[0]+o[2]*n,o[3],o[4])}))})(e,t.props,n),((e,t,n)=>{let o=[],r=s(e);d(t,((e,t)=>{let r=t[0];t[1];let a=t[2],l=t[3];e.includes("rotate")||e.includes("skew")?""===l&&(l="deg"):l=e.includes("scale")?"":"px","turn"===l?o.push(`${e}(${t[1]*n+l})`):o.push(`${e}(${r+a*n+l})`)})),r.forEach(((e,n)=>{void 0===t[n]&&o.push(`${n}(${e})`)})),l(e,"transform",o.join(" "))})(e,t.transform,n),function(e,t,n){d(t,(function(t,o){let r=[0,0,0];for(let e=0;e<3;e++)r[e]=Math.floor(o[0][e]+o[2][e]*n);l(e,t,`rgb(${r.join(",")})`)}))}(e,t.color,n)},u=(l,p,u="normal")=>{const f={props:{},transform:{},color:{}};let m,y,g,M,b=s(l);return d(p,((s,p)=>{const d=e.includes(s),v=t.includes(s),x=r.includes(s);if(Array.isArray(p)&&1===p.length&&(p=p[0]),Array.isArray(p)?(m=x?i(c(p[0])):w(p[0]),y=x?i(c(p[1])):w(p[1])):(m=d?b.get(s)||0:x?((e,t)=>getComputedStyle(e)[t].replace(/[^\d.,]/g,"").split(",").map((e=>parseInt(e))))(l,s):((e,t,n)=>void 0!==e[t]?o.includes(t)?"scrollLeft"===t?e===window?pageXOffset:e.scrollLeft:e===window?pageYOffset:e.scrollTop:e[t]||0:e.style[t]||getComputedStyle(e,n)[t])(l,s),m=x?m:w(m),y=x?i(p):w(((e,t)=>{const n=/^(\*=|\+=|-=)/.exec(e);if(!n)return e;const o=h(e)||0,r=parseFloat(t),a=parseFloat(e.replace(n[0],""));switch(n[0][0]){case"+":return r+a+o;case"-":return r-a+o;case"*":return r*a+o}})(p,Array.isArray(m)?m[0]:m))),a.includes(s)&&m[0]===y[0]&&(m[0]=y[0]>0?0:1),"reverse"===u&&([y,m]=[m,y]),M=l instanceof HTMLElement&&""===y[1]&&!v&&!d?"px":y[1],x){g=[0,0,0];for(let e=0;e<3;e++)g[e]=y[e]-m[e]}else g=y[0]-m[0];d?f.transform[s]=[m[0],y[0],g,M]:x?f.color[s]=[m,y,g,M]:f.props[s]=[m[0],y[0],g,M,!n.includes(s)]})),f},f=(e,t,n)=>{let o;if("function"==typeof e)o=e;else if(/^[a-z]+[\w.]*[\w]$/i.test(e)){const t=e.split(".");o=global;for(let e=0;e<t.length;e++)o=o[t[e]]}else o=new Function("a",e);return o.apply(n,t)},m=e=>e.replace(/-([a-z])/g,(e=>e[1].toUpperCase())),d=(e,t)=>{let n=0;if(y(e))[].forEach.call(e,(function(e,n){t.apply(e,[n,e])}));else for(let o in e)e.hasOwnProperty(o)&&t.apply(e[o],[o,e[o],n++]);return e},y=e=>Array.isArray(e)||"object"==typeof e&&"length"in e&&"number"==typeof e.length,h=(e,t)=>{const n=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(e);return void 0!==n[1]?n[1]:t},w=e=>{const t=[0,""];return e=""+e,t[0]=parseFloat(e),t[1]=e.match(/[\d.\-+]*\s*(.*)/)[1]||"",t};function g(e,t,n){return Math.min(Math.max(e,t),n)}const M={linear:()=>e=>e};M.default=M.linear;const b={Sine:()=>e=>1-Math.cos(e*Math.PI/2),Circ:()=>e=>1-Math.sqrt(1-e*e),Back:()=>e=>e*e*(3*e-2),Bounce:()=>e=>{let t,n=4;for(;e<((t=Math.pow(2,--n))-1)/11;);return 1/Math.pow(4,3-n)-7.5625*Math.pow((3*t-2)/22-e,2)},Elastic:(e=1,t=.5)=>{const n=g(e,1,10),o=g(t,.1,2);return e=>0===e||1===e?e:-n*Math.pow(2,10*(e-1))*Math.sin((e-1-o/(2*Math.PI)*Math.asin(1/n))*(2*Math.PI)/o)}};["Quad","Cubic","Quart","Quint","Expo"].forEach(((e,t)=>{b[e]=()=>e=>Math.pow(e,t+2)})),Object.keys(b).forEach((e=>{const t=b[e];M["easeIn"+e]=t,M["easeOut"+e]=(e,n)=>o=>1-t(e,n)(1-o),M["easeInOut"+e]=(e,n)=>o=>o<.5?t(e,n)(2*o)/2:1-t(e,n)(-2*o+2)/2}));const v={fx:!0,elements:{}},x={id:null,el:null,draw:{},dur:1e3,ease:"linear",loop:0,pause:0,dir:"normal",defer:0,onFrame:()=>{},onDone:()=>{}},A=function(e){return new Promise((function(t){let n,o,{id:r,el:a,draw:l,dur:s,ease:i,loop:c,onFrame:m,onDone:d,pause:y,dir:h,defer:w}=Object.assign({},x,e),g={},b="linear",A=[],E=M.linear,$="alternate"===h?"normal":h,F=!1,I=r||+performance.now()*Math.pow(10,14);if(void 0===(j=a)||null==j)throw new Error("Unknown element!");var j;if("string"==typeof a&&(a=document.querySelector(a)),"function"!=typeof l&&"object"!=typeof l)throw new Error("Unknown draw object. Must be a function or object!");0!==s&&v.fx||(s=1),"alternate"===h&&"number"==typeof c&&(c*=2),"string"==typeof i?(o=/\(([^)]+)\)/.exec(i),b=i.split("(")[0],A=o?o[1].split(",").map((e=>parseFloat(e))):[],E=M[b]):E="function"==typeof i?i:M.linear,v.elements[I]={element:a,id:null,stop:0,pause:0,loop:0};const k=()=>{"object"==typeof l&&(g=u(a,l,$)),n=performance.now(),v.elements[I].loop+=1,v.elements[I].id=requestAnimationFrame(C)},T=()=>{cancelAnimationFrame(v.elements[I].id),delete v.elements[r],f(d,null,a),f(t,[this],a)},C=e=>{let t,o;const r=v.elements[I].stop;if(r>0)return 2===r&&("function"==typeof l?l.bind(a)(1,1):p(a,g,1)),void T();o=(e-n)/s,o>1&&(o=1),o<0&&(o=0),t=E.apply(null,A)(o),"function"==typeof l?l.bind(a)(o,t):p(a,g,t),f(m,[o,t],a),o<1&&(v.elements[I].id=requestAnimationFrame(C)),1===parseInt(o)&&(c?("alternate"===h&&($="normal"===$?"reverse":"normal"),"boolean"==typeof c||c>v.elements[I].loop?setTimeout((function(){k()}),y):T()):"alternate"!==h||F?T():($="normal"===$?"reverse":"normal",F=!0,k()))};w>0?setTimeout((()=>{k()}),w):k()}))};v.animate=A,v.stop=function(e,t=!0){v.elements[e].stop=!0===t?2:1},v.chain=async function e(t,n){for(let e=0;e<t.length;e++){const n=t[e];n.loop=!1,await A(n)}("boolean"==typeof n&&n||"number"==typeof n&&--n>0)&&await e(t,n)},v.easing=M,globalThis.Animation=v}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
